const Form = require('../models/Form');
const CallTask = require('../models/CallTask');
const DeletionLog = require('../models/DeletionLog');
const { mainKeyboard, backKeyboard } = require('./mainMenu');
const { Markup } = require('telegraf');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ä–º—ã"
const handleViewForms = async (ctx) => {
  try {
    const forms = await Form.find().sort({ treatment_date: -1 });
    if (forms.length === 0) {
      ctx.reply('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º.', mainKeyboard);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—ã
    const formButtons = forms.map((form, index) => {
      return [Markup.button.callback(`–§–æ—Ä–º–∞ #${index + 1} (${form.farm_name})`, `view_form_${form._id}`)];
    });
    
    const keyboard = Markup.inlineKeyboard([
      ...formButtons,
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', 'back_to_main')]
    ]);
    
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', keyboard);
  } catch (error) {
    console.error('Error fetching forms:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º.', mainKeyboard);
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
const handleViewForm = async (ctx) => {
  try {
    const formId = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ä–º—ã –∏–∑ callback_data
    const form = await Form.findById(formId);
    
    if (!form) {
      ctx.reply('–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', mainKeyboard);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∑–≤–æ–Ω–∫–∞
    const callTask = await CallTask.findOne({ form_id: formId });
    const taskStatus = callTask ? callTask.status : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
    
    const message = `–î–µ—Ç–∞–ª–∏ —Ñ–æ—Ä–º—ã:\n\n` +
      `–•–æ–∑—è–π—Å—Ç–≤–æ: ${form.farm_name}\n` +
      `–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${form.phone_number}\n` +
      `–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${form.treatment_date}\n` +
      `–ü—Ä–µ–ø–∞—Ä–∞—Ç: ${form.chemical_name}\n` +
      `–†–∞–∑–º–µ—Ä –ø–æ–ª—è: ${form.field_size} –≥–∞\n` +
      `pH –¥–æ: ${form.ph_before}\n` +
      `pH –ø–æ—Å–ª–µ: ${form.ph_after}\n` +
      `–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞: ${form.call_date}\n` +
      `–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: ${form.call_time}\n` +
      `–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: ${taskStatus}`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–æ—Ä–º–æ–π
    const keyboardButtons = [];
    
    if (callTask && callTask.status === 'pending') {
      keyboardButtons.push([Markup.button.callback('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é', `complete_task_${form._id}`)]);
    }
    
    keyboardButtons.push(
      [Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ä–º—É', `delete_form_${form._id}`)],
      [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ñ–æ—Ä–º', 'view_forms')]
    );
    
    const keyboard = Markup.inlineKeyboard(keyboardButtons);
    
    ctx.reply(message, keyboard);
  } catch (error) {
    console.error('Error viewing form:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–æ—Ä–º—ã.', mainKeyboard);
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
const handleCompleteTask = async (ctx) => {
  try {
    const formId = ctx.match[1];
    const callTask = await CallTask.findOne({ form_id: formId });
    
    if (!callTask) {
      ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', mainKeyboard);
      return;
    }
    
    if (callTask.status === 'done') {
      ctx.reply('–ó–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.', mainKeyboard);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    callTask.status = 'done';
    await callTask.save();
    
    ctx.reply('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!', mainKeyboard);
  } catch (error) {
    console.error('Error completing task:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏.', mainKeyboard);
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
const handleDeleteForm = async (ctx) => {
  try {
    const formId = ctx.match[1];
    const form = await Form.findById(formId);
    
    if (!form) {
      ctx.reply('–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', mainKeyboard);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–æ—Ä–º—ã
    const deletionLog = new DeletionLog({
      form_id: form._id,
      deleted_by: {
        user_id: ctx.from.id,
        first_name: ctx.from.first_name
      },
      form_data: {
        farm_name: form.farm_name,
        treatment_date: form.treatment_date,
        chemical_name: form.chemical_name,
        field_size: form.field_size,
        ph_before: form.ph_before,
        ph_after: form.ph_after,
        call_date: form.call_date,
        call_time: form.call_time
      }
    });

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∑–≤–æ–Ω–∫–∞
    await CallTask.deleteMany({ form_id: form._id });
    
    // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º—É
    await Form.findByIdAndDelete(formId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è
    await deletionLog.save();
    
    ctx.reply('–§–æ—Ä–º–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!', mainKeyboard);
  } catch (error) {
    console.error('Error deleting form:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã.', mainKeyboard);
  }
};

module.exports = {
  handleViewForms,
  handleViewForm,
  handleDeleteForm,
  handleCompleteTask
}; 