const Order = require('../models/Order');
const { backKeyboard, mainKeyboard } = require('./mainMenu');
const { Markup } = require('telegraf');
const sellerData = require('../data/sellerData.json');
const PizZip = require('pizzip');
const Docxtemplater = require('docxtemplater');
const fs = require('fs-extra');
const path = require('path');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥—Ä–æ–Ω–æ–≤
const DRONES = {
  T50_BASIC: {
    name: '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π –¥—Ä–æ–Ω DJI Agras T50 –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏',
    price: 10563605,
    nds: 1134491.61
  },
  T50_SPREADER: {
    name: '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π –¥—Ä–æ–Ω DJI Agras T50 –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º, –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏ –∏ —Ä–∞–∑–±—Ä–∞—Å—ã–≤–∞—Ç–µ–ª–µ–º',
    price: 11138835,
    nds: 1195230.54
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ docx —Ñ–∞–π–ª–∞
const generateDocx = async (orderData) => {
  try {
    // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
    const templatePath = path.join(__dirname, '../data/template_agreement.docx');
    const content = await fs.readFile(templatePath);
    const zip = new PizZip(content);
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    const doc = new Docxtemplater(zip, {
      paragraphLoop: true,
      linebreaks: true,
    });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    const templateData = {
      company_name: orderData.company_name,
      contacts: orderData.contacts,
      equipment_name: orderData.equipment.name,
      price: orderData.equipment.price.toLocaleString('ru-RU'),
      pieces: orderData.equipment.pieces,
      price_total: orderData.equipment.price_total.toLocaleString('ru-RU'),
      nds: orderData.equipment.nds_total.toLocaleString('ru-RU'),
      seller_company: sellerData.seller.seller_company,
      seller_name: sellerData.seller.director_name,
      seller_director: sellerData.seller.director_name,
      seller_data: sellerData.seller.seller_data,
      seller_phone: sellerData.seller.phone_number,
      seller_address: sellerData.seller.address,
      date: new Date().toLocaleDateString('ru-RU'),
      agreement_date: orderData.agreement_date || new Date().toLocaleDateString('ru-RU'),
      contact_number: orderData.contact_number || `‚Ññ${orderData.order_id.slice(0, 8)}`,
      director: sellerData.seller.director_name,
      contract_number: orderData.contact_number || `‚Ññ${orderData.order_id.slice(0, 8)}`
    };

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    doc.render(templateData);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º docx
    const buf = doc.getZip().generate({
      type: 'nodebuffer',
      compression: 'DEFLATE'
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const outputPath = path.join(__dirname, `../temp/agreement_${orderData.order_id}.docx`);
    await fs.outputFile(outputPath, buf);
    return outputPath;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    throw error;
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /neworder
const handleNewOrderCommand = (ctx) => {
  ctx.session.order = {};  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
  ctx.session.step = 'order_company_name';  // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', 'auto_fill')],
    [Markup.button.callback('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é', 'manual_fill')]
  ]);
  
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', keyboard);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
const handleAutoFill = async (ctx) => {
  ctx.session.order = {
    company_name: sellerData.seller.seller_company,
    contacts: `–¢–µ–ª–µ—Ñ–æ–Ω: ${sellerData.seller.phone_number}\n–ê–¥—Ä–µ—Å: ${sellerData.seller.address}`,
    seller_info: {
      name: sellerData.seller.seller_name,
      director: sellerData.seller.director_name,
      data: sellerData.seller.seller_data
    },
    agreement_date: new Date().toLocaleDateString('ru-RU')
  };
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –¥—Ä–æ–Ω–∞
  handleDroneSelection(ctx);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä–æ–Ω–∞
const handleDroneSelection = (ctx) => {
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('DJI Agras T50 (–±–∞–∑–æ–≤—ã–π)', 'select_drone_T50_BASIC')],
    [Markup.button.callback('DJI Agras T50 (—Å —Ä–∞–∑–±—Ä–∞—Å—ã–≤–∞—Ç–µ–ª–µ–º)', 'select_drone_T50_SPREADER')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
  ]);
  
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥—Ä–æ–Ω–∞:', keyboard);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞
const handleSpecificDroneSelection = (ctx) => {
  const droneType = ctx.match[1];
  const drone = DRONES[droneType];
  
  ctx.session.order.equipment = {
    name: drone.name,
    price: drone.price,
    nds: drone.nds
  };
  
  ctx.session.step = 'order_pieces';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä–æ–Ω–æ–≤:', backKeyboard);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
const handlePiecesInput = (ctx) => {
  const pieces = parseInt(ctx.message.text);
  
  if (isNaN(pieces) || pieces <= 0) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):', backKeyboard);
  }
  
  ctx.session.order.equipment.pieces = pieces;
  ctx.session.order.equipment.price_total = ctx.session.order.equipment.price * pieces;
  ctx.session.order.equipment.nds_total = ctx.session.order.equipment.nds * pieces;
  
  ctx.session.step = 'order_agreement_date';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–≥–ª–∞—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.03.2024):', backKeyboard);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
const handleOrderText = async (ctx) => {
  if (!ctx.session || !ctx.session.step || !ctx.session.step.startsWith('order_')) return;

  const text = ctx.message.text;

  switch (ctx.session.step) {
    case 'order_company_name':
      ctx.session.order.company_name = text;
      ctx.session.step = 'order_contacts';
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å):', backKeyboard);
      break;
      
    case 'order_contacts':
      ctx.session.order.contacts = text;
      handleDroneSelection(ctx);
      break;
      
    case 'order_pieces':
      handlePiecesInput(ctx);
      break;

    case 'order_agreement_date':
      ctx.session.order.agreement_date = text;
      ctx.session.step = 'order_contact_number';
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', backKeyboard);
      break;

    case 'order_contact_number':
      ctx.session.order.contact_number = text;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
      if (ctx.session.order.seller_info) {
        try {
          const order = new Order({
            company_name: ctx.session.order.company_name,
            contacts: ctx.session.order.contacts,
            equipment: ctx.session.order.equipment,
            seller_info: ctx.session.order.seller_info,
            agreement_date: ctx.session.order.agreement_date,
            contact_number: ctx.session.order.contact_number,
            author_id: ctx.from.id
          });
          
          const savedOrder = await order.save();
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
          const docxPath = await generateDocx(savedOrder);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await ctx.replyWithDocument({
            source: docxPath,
            filename: `agreement_${savedOrder.order_id}.docx`
          });
          
          ctx.reply('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', mainKeyboard);
          ctx.session = null;
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
          ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', mainKeyboard);
        }
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ —Ä—É—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
        ctx.session.step = 'order_seller_info';
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:', backKeyboard);
      }
      break;
      
    case 'order_seller_info':
      ctx.session.order.seller_info = {
        name: sellerData.seller.seller_name,
        director: sellerData.seller.director_name,
        data: sellerData.seller.seller_data
      };
      
      try {
        const order = new Order({
          company_name: ctx.session.order.company_name,
          contacts: ctx.session.order.contacts,
          equipment: ctx.session.order.equipment,
          seller_info: ctx.session.order.seller_info,
          agreement_date: ctx.session.order.agreement_date,
          contact_number: ctx.session.order.contact_number,
          author_id: ctx.from.id
        });
        
        const savedOrder = await order.save();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        const docxPath = await generateDocx(savedOrder);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.replyWithDocument({
          source: docxPath,
          filename: `agreement_${savedOrder.order_id}.docx`
        });
        
        ctx.reply('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', mainKeyboard);
        ctx.session = null;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', mainKeyboard);
      }
      break;
  }
};

module.exports = {
  handleNewOrderCommand,
  handleOrderText,
  handleAutoFill,
  handleDroneSelection,
  handleSpecificDroneSelection
}; 