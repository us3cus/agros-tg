const Order = require('../models/Order');
const { mainKeyboard } = require('./mainMenu');
const { Markup } = require('telegraf');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
const handleViewOrders = async (ctx) => {
  try {
    const orders = await Order.find().sort({ created_at: -1 });

    if (orders.length === 0) {
      return ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç.', mainKeyboard);
    }

    let message = 'üìã *–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:*\n\n';
    const inlineKeyboard = [];

    for (const order of orders) {
      message += `üîπ *–ó–∞–∫–∞–∑*: ${order.company_name} (${order.date})\n`;
      message += `   ID: \`${order.order_id}\`\n\n`;
      
      inlineKeyboard.push([
        Markup.button.callback(`üìÑ ${order.company_name}`, `view_order_${order._id}`)
      ]);
    }

    inlineKeyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]);

    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(inlineKeyboard));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.', mainKeyboard);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
const handleViewOrder = async (ctx) => {
  try {
    const orderId = ctx.match[1];
    const order = await Order.findById(orderId);

    if (!order) {
      return ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.', mainKeyboard);
    }

    let message = 'üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:*\n\n';
    message += `üè¢ *–ö–æ–º–ø–∞–Ω–∏—è*: ${order.company_name}\n`;
    message += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã*: ${order.contacts}\n`;
    message += `üöÅ *–î—Ä–æ–Ω—ã*:\n`;
    
    order.drones.forEach((drone, index) => {
      message += `   ${index + 1}. ${drone}\n`;
    });
    
    message += `üìÖ *–î–∞—Ç–∞*: ${order.date}\n`;
    message += `üÜî *ID –∑–∞–∫–∞–∑–∞*: \`${order.order_id}\`\n`;
    message += `üìù *–°—Ç–∞—Ç—É—Å*: ${order.status}\n`;
    
    const googleFormUrl = `https://forms.google.com/your-form-id-here?entry.999999=${order.order_id}`;
    message += `\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É](${googleFormUrl})`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', `delete_order_${order._id}`)],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'view_orders')],
      [Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'back_to_main')]
    ]);

    await ctx.replyWithMarkdown(message, {
      ...keyboard,
      disable_web_page_preview: true
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.', mainKeyboard);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
const handleDeleteOrder = async (ctx) => {
  try {
    const orderId = ctx.match[1];
    const order = await Order.findById(orderId);

    if (!order) {
      return ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.', mainKeyboard);
    }

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_order_${order._id}`),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `view_order_${order._id}`)
      ]
    ]);

    await ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –∫–æ–º–ø–∞–Ω–∏–∏ "${order.company_name}"?`, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞.', mainKeyboard);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
const handleConfirmDeleteOrder = async (ctx) => {
  try {
    const orderId = ctx.match[1];
    const order = await Order.findByIdAndDelete(orderId);

    if (!order) {
      return ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.', mainKeyboard);
    }

    await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ –∫–æ–º–ø–∞–Ω–∏–∏ "${order.company_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`, mainKeyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.', mainKeyboard);
  }
};

module.exports = {
  handleViewOrders,
  handleViewOrder,
  handleDeleteOrder,
  handleConfirmDeleteOrder
}; 